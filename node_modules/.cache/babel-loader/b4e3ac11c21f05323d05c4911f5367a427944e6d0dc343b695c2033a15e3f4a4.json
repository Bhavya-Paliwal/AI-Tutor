{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BhavyaPaliwal\\\\ai-tutor-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { MessageCircle, X, Send, Bot, User } from 'lucide-react';\n// Note: Assuming 'getApiUrl' is a helper function from a separate file\n// For this example, we'll mock it for a complete, runnable component.\n// In your real application, you would still use your actual getApiUrl.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getApiUrl = path => `https://example.com${path}`;\n\n// Interface for a chat message\n\n// Main App component\nexport default function App() {\n  _s();\n  // State for managing the chat widget's open/closed state\n  const [isChatOpen, setIsChatOpen] = useState(false);\n\n  // State for storing the list of chat messages\n  const [messages, setMessages] = useState([{\n    id: '1',\n    text: \"Hello! I'm your AI Tutor. I'm here to help you learn and answer any questions you might have. What would you like to learn today?\",\n    sender: 'bot',\n    timestamp: new Date()\n  }]);\n\n  // State for the text input field\n  const [inputText, setInputText] = useState('');\n\n  // State to manage the loading/request in-progress status\n  const [isLoading, setIsLoading] = useState(false);\n\n  // A ref to store the AbortController, which allows us to cancel the fetch request\n  const abortControllerRef = useRef(null);\n\n  // Refs for auto-scrolling and input focus\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // Effect to scroll to the bottom of the chat messages whenever they update\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Effect to focus the input field when the chat widget opens\n  useEffect(() => {\n    if (isChatOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isChatOpen]);\n\n  /**\r\n   * Handles sending a new message to the AI.\r\n   * This function initiates a new fetch request and handles streaming responses.\r\n   */\n  const handleSendMessage = async () => {\n    if (!inputText.trim() || isLoading) return;\n\n    // Create a new AbortController for this specific request\n    const abortController = new AbortController();\n    abortControllerRef.current = abortController;\n    const userMessage = {\n      id: Date.now().toString(),\n      text: inputText,\n      sender: 'user',\n      timestamp: new Date()\n    };\n\n    // Add the user's message to the chat\n    setMessages(prev => [...prev, userMessage]);\n\n    // Clear the input field and set loading state\n    setInputText('');\n    setIsLoading(true);\n\n    // Create a placeholder bot message for the streaming response\n    const botMessageId = (Date.now() + 1).toString();\n    const streamingMessage = {\n      id: botMessageId,\n      text: '',\n      sender: 'bot',\n      timestamp: new Date(),\n      isStreaming: true\n    };\n    setMessages(prev => [...prev, streamingMessage]);\n    try {\n      // The API endpoint and request body\n      const apiUrl = getApiUrl('/api/Tutor/ask');\n      const requestBody = {\n        message: userMessage.text,\n        question: userMessage.text\n      };\n\n      // Perform the fetch request, passing the AbortController's signal\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        signal: abortController.signal // This is the key for cancellation\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // Check if response is streaming or JSON\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const jsonResponse = await response.json();\n        const answer = jsonResponse.answer || jsonResponse.message || jsonResponse.response || jsonResponse.content || (typeof jsonResponse === 'string' ? jsonResponse : JSON.stringify(jsonResponse));\n\n        // Format the response for better display\n        const formatResponse = text => {\n          return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>').replace(/\\*(.*?)\\*/g, '<em>$1</em>').replace(/```([\\s\\S]*?)```/g, '<pre><code>$1</code></pre>').replace(/`([^`]+)`/g, '<code>$1</code>').replace(/\\n/g, '<br>');\n        };\n\n        // Simulate streaming for JSON responses\n        let displayText = '';\n        for (let i = 0; i < answer.length; i++) {\n          displayText += answer[i];\n          const formattedText = formatResponse(displayText);\n          setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n            ...msg,\n            text: formattedText\n          } : msg));\n          await new Promise(resolve => setTimeout(resolve, 20));\n        }\n      } else {\n        var _response$body;\n        // Handle a true streaming response\n        const reader = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.getReader();\n        if (!reader) throw new Error('No response body');\n        let accumulatedText = '';\n        while (true) {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) break;\n          const chunk = new TextDecoder().decode(value);\n          accumulatedText += chunk;\n          setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n            ...msg,\n            text: accumulatedText\n          } : msg));\n        }\n      }\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        console.log('Fetch request was aborted.');\n        setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n          ...msg,\n          isStreaming: false,\n          text: msg.text + ' (Request stopped)'\n        } : msg));\n      } else {\n        console.error('Error:', error);\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n        setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n          ...msg,\n          text: `Error: ${errorMessage}. Please check your backend connection.`,\n          isStreaming: false\n        } : msg));\n      }\n    } finally {\n      // Clean up the state regardless of success or failure\n      setIsLoading(false);\n      setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n        ...msg,\n        isStreaming: false\n      } : msg));\n      abortControllerRef.current = null;\n    }\n  };\n\n  /**\r\n   * Handles stopping the current streaming response.\r\n   * This calls the abort method on the stored AbortController.\r\n   */\n  const handleStopGenerating = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n  };\n\n  /**\r\n   * Handles keyboard events, specifically the 'Enter' key for sending messages.\r\n   */\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-widget ${isChatOpen ? 'open' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header-content\",\n          children: [/*#__PURE__*/_jsxDEV(Bot, {\n            className: \"chat-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"AI Tutor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status\",\n              children: \"Online\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setIsChatOpen(false),\n          children: /*#__PURE__*/_jsxDEV(X, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender === 'user' ? 'user' : 'bot'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-avatar\",\n            children: message.sender === 'user' ? /*#__PURE__*/_jsxDEV(User, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 46\n            }, this) : /*#__PURE__*/_jsxDEV(Bot, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 67\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-text\",\n              dangerouslySetInnerHTML: {\n                __html: message.text\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 34\n            }, this), message.isStreaming && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"typing-indicator\",\n              children: \"\\u258B\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 42\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-time\",\n              children: message.timestamp.toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Type your question...\",\n          disabled: isLoading,\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !inputText.trim() || isLoading,\n          className: \"send-button\",\n          children: /*#__PURE__*/_jsxDEV(Send, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-toggle-button\",\n      onClick: () => setIsChatOpen(!isChatOpen),\n      children: isChatOpen ? /*#__PURE__*/_jsxDEV(X, {\n        size: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(MessageCircle, {\n        size: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cAV4aLJdJVYSotUfNeEvmi0iCfM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","MessageCircle","X","Send","Bot","User","jsxDEV","_jsxDEV","getApiUrl","path","App","_s","isChatOpen","setIsChatOpen","messages","setMessages","id","text","sender","timestamp","Date","inputText","setInputText","isLoading","setIsLoading","abortControllerRef","messagesEndRef","inputRef","_messagesEndRef$curre","current","scrollIntoView","behavior","focus","handleSendMessage","trim","abortController","AbortController","userMessage","now","toString","prev","botMessageId","streamingMessage","isStreaming","apiUrl","requestBody","message","question","response","fetch","method","headers","body","JSON","stringify","signal","ok","Error","status","statusText","contentType","get","includes","jsonResponse","json","answer","content","formatResponse","replace","displayText","i","length","formattedText","map","msg","Promise","resolve","setTimeout","_response$body","reader","getReader","accumulatedText","done","value","read","chunk","TextDecoder","decode","error","name","console","log","errorMessage","handleStopGenerating","abort","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","dangerouslySetInnerHTML","__html","toLocaleTimeString","hour","minute","ref","type","onChange","target","onKeyPress","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/BhavyaPaliwal/ai-tutor-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { MessageCircle, X, Send, Bot, User, Square } from 'lucide-react';\r\n// Note: Assuming 'getApiUrl' is a helper function from a separate file\r\n// For this example, we'll mock it for a complete, runnable component.\r\n// In your real application, you would still use your actual getApiUrl.\r\nconst getApiUrl = (path: string) => `https://example.com${path}`;\r\n\r\n// Interface for a chat message\r\ninterface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'bot';\r\n  timestamp: Date;\r\n  isStreaming?: boolean;\r\n}\r\n\r\n// Main App component\r\nexport default function App() {\r\n  // State for managing the chat widget's open/closed state\r\n  const [isChatOpen, setIsChatOpen] = useState(false);\r\n  \r\n  // State for storing the list of chat messages\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: '1',\r\n      text: \"Hello! I'm your AI Tutor. I'm here to help you learn and answer any questions you might have. What would you like to learn today?\",\r\n      sender: 'bot',\r\n      timestamp: new Date()\r\n    }\r\n  ]);\r\n\r\n  // State for the text input field\r\n  const [inputText, setInputText] = useState('');\r\n  \r\n  // State to manage the loading/request in-progress status\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  // A ref to store the AbortController, which allows us to cancel the fetch request\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n\r\n  // Refs for auto-scrolling and input focus\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Effect to scroll to the bottom of the chat messages whenever they update\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Effect to focus the input field when the chat widget opens\r\n  useEffect(() => {\r\n    if (isChatOpen && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isChatOpen]);\r\n\r\n  /**\r\n   * Handles sending a new message to the AI.\r\n   * This function initiates a new fetch request and handles streaming responses.\r\n   */\r\n  const handleSendMessage = async () => {\r\n    if (!inputText.trim() || isLoading) return;\r\n\r\n    // Create a new AbortController for this specific request\r\n    const abortController = new AbortController();\r\n    abortControllerRef.current = abortController;\r\n\r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      text: inputText,\r\n      sender: 'user',\r\n      timestamp: new Date()\r\n    };\r\n\r\n    // Add the user's message to the chat\r\n    setMessages(prev => [...prev, userMessage]);\r\n    \r\n    // Clear the input field and set loading state\r\n    setInputText('');\r\n    setIsLoading(true);\r\n\r\n    // Create a placeholder bot message for the streaming response\r\n    const botMessageId = (Date.now() + 1).toString();\r\n    const streamingMessage: Message = {\r\n      id: botMessageId,\r\n      text: '',\r\n      sender: 'bot',\r\n      timestamp: new Date(),\r\n      isStreaming: true\r\n    };\r\n\r\n    setMessages(prev => [...prev, streamingMessage]);\r\n\r\n    try {\r\n      // The API endpoint and request body\r\n      const apiUrl = getApiUrl('/api/Tutor/ask');\r\n      const requestBody = {\r\n        message: userMessage.text,\r\n        question: userMessage.text,\r\n      };\r\n\r\n      // Perform the fetch request, passing the AbortController's signal\r\n      const response = await fetch(apiUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(requestBody),\r\n        signal: abortController.signal, // This is the key for cancellation\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      // Check if response is streaming or JSON\r\n      const contentType = response.headers.get('content-type');\r\n      \r\n      if (contentType && contentType.includes('application/json')) {\r\n        const jsonResponse = await response.json();\r\n        const answer = jsonResponse.answer || jsonResponse.message || jsonResponse.response || jsonResponse.content || (typeof jsonResponse === 'string' ? jsonResponse : JSON.stringify(jsonResponse));\r\n        \r\n        // Format the response for better display\r\n        const formatResponse = (text: string) => {\r\n          return text\r\n            .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n            .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\r\n            .replace(/```([\\s\\S]*?)```/g, '<pre><code>$1</code></pre>')\r\n            .replace(/`([^`]+)`/g, '<code>$1</code>')\r\n            .replace(/\\n/g, '<br>');\r\n        };\r\n        \r\n        // Simulate streaming for JSON responses\r\n        let displayText = '';\r\n        for (let i = 0; i < answer.length; i++) {\r\n          displayText += answer[i];\r\n          const formattedText = formatResponse(displayText);\r\n          setMessages(prev => prev.map(msg => \r\n            msg.id === botMessageId \r\n              ? { ...msg, text: formattedText }\r\n              : msg\r\n          ));\r\n          await new Promise(resolve => setTimeout(resolve, 20));\r\n        }\r\n      } else {\r\n        // Handle a true streaming response\r\n        const reader = response.body?.getReader();\r\n        if (!reader) throw new Error('No response body');\r\n\r\n        let accumulatedText = '';\r\n        \r\n        while (true) {\r\n          const { done, value } = await reader.read();\r\n          if (done) break;\r\n          \r\n          const chunk = new TextDecoder().decode(value);\r\n          accumulatedText += chunk;\r\n          \r\n          setMessages(prev => prev.map(msg => \r\n            msg.id === botMessageId \r\n              ? { ...msg, text: accumulatedText }\r\n              : msg\r\n          ));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      if ((error as any).name === 'AbortError') {\r\n        console.log('Fetch request was aborted.');\r\n        setMessages(prev => prev.map(msg =>\r\n          msg.id === botMessageId ? { ...msg, isStreaming: false, text: msg.text + ' (Request stopped)' } : msg\r\n        ));\r\n      } else {\r\n        console.error('Error:', error);\r\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n        setMessages(prev => prev.map(msg => \r\n          msg.id === botMessageId \r\n            ? { ...msg, text: `Error: ${errorMessage}. Please check your backend connection.`, isStreaming: false }\r\n            : msg\r\n        ));\r\n      }\r\n    } finally {\r\n      // Clean up the state regardless of success or failure\r\n      setIsLoading(false);\r\n      setMessages(prev => prev.map(msg => \r\n        msg.id === botMessageId \r\n          ? { ...msg, isStreaming: false }\r\n          : msg\r\n      ));\r\n      abortControllerRef.current = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles stopping the current streaming response.\r\n   * This calls the abort method on the stored AbortController.\r\n   */\r\n  const handleStopGenerating = () => {\r\n    if (abortControllerRef.current) {\r\n      abortControllerRef.current.abort();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles keyboard events, specifically the 'Enter' key for sending messages.\r\n   */\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Chat Widget */}\r\n      <div className={`chat-widget ${isChatOpen ? 'open' : ''}`}>\r\n        {/* Chat Header */}\r\n        <div className=\"chat-header\">\r\n          <div className=\"chat-header-content\">\r\n            <Bot className=\"chat-icon\" />\r\n            <div>\r\n              <h3>AI Tutor</h3>\r\n              <span className=\"status\">Online</span>\r\n            </div>\r\n          </div>\r\n          <button \r\n            className=\"close-button\"\r\n            onClick={() => setIsChatOpen(false)}\r\n          >\r\n            <X size={20} />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Chat Messages */}\r\n        <div className=\"chat-messages\">\r\n          {messages.map((message) => (\r\n            <div \r\n              key={message.id} \r\n              className={`message ${message.sender === 'user' ? 'user' : 'bot'}`}\r\n            >\r\n              <div className=\"message-avatar\">\r\n                {message.sender === 'user' ? <User size={16} /> : <Bot size={16} />}\r\n              </div>\r\n              <div className=\"message-content\">\r\n                                 <div \r\n                   className=\"message-text\"\r\n                   dangerouslySetInnerHTML={{ __html: message.text }}\r\n                 />\r\n                 {message.isStreaming && <span className=\"typing-indicator\">▋</span>}\r\n                <div className=\"message-time\">\r\n                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n\r\n        {/* Chat Input */}\r\n        <div className=\"chat-input-container\">\r\n          <input\r\n            ref={inputRef}\r\n            type=\"text\"\r\n            value={inputText}\r\n            onChange={(e) => setInputText(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"Type your question...\"\r\n            disabled={isLoading}\r\n            className=\"chat-input\"\r\n          />\r\n          <button \r\n            onClick={handleSendMessage}\r\n            disabled={!inputText.trim() || isLoading}\r\n            className=\"send-button\"\r\n          >\r\n            <Send size={18} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Floating Chat Button */}\r\n      <button \r\n        className=\"chat-toggle-button\"\r\n        onClick={() => setIsChatOpen(!isChatOpen)}\r\n      >\r\n        {isChatOpen ? <X size={24} /> : <MessageCircle size={24} />}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}