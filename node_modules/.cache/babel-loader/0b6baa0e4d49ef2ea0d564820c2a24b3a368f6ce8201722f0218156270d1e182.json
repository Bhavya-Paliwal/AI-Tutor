{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BhavyaPaliwal\\\\ai-tutor-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { MessageCircle, X, Send, Bot, User } from 'lucide-react';\nimport { getApiUrl } from './config';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [messages, setMessages] = useState([{\n    id: '1',\n    text: \"Hello! I'm your AI Tutor. I'm here to help you learn and answer any questions you might have. What would you like to learn today?\",\n    sender: 'bot',\n    timestamp: new Date()\n  }]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const controllerRef = useRef(null); // 🚨 Added controller\n\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  useEffect(() => {\n    if (isChatOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isChatOpen]);\n  const handleSendMessage = async () => {\n    if (!inputText.trim() || isLoading) return;\n    const userMessage = {\n      id: Date.now().toString(),\n      text: inputText,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputText('');\n    setIsLoading(true);\n    const botMessageId = (Date.now() + 1).toString();\n    const streamingMessage = {\n      id: botMessageId,\n      text: '',\n      sender: 'bot',\n      timestamp: new Date(),\n      isStreaming: true\n    };\n    setMessages(prev => [...prev, streamingMessage]);\n    try {\n      const apiUrl = getApiUrl('/api/Tutor/ask');\n      const requestBody = {\n        message: inputText,\n        question: inputText,\n        query: inputText,\n        prompt: inputText\n      };\n      const controller = new AbortController(); // 🚨 Create new controller\n\n      controllerRef.current = controller;\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal // 🚨 Add signal to fetch\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const jsonResponse = await response.json();\n        let answer = jsonResponse.answer || jsonResponse.message || jsonResponse.response || jsonResponse.content || JSON.stringify(jsonResponse);\n        const formatResponse = text => {\n          return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>').replace(/\\*(.*?)\\*/g, '<em>$1</em>').replace(/```([\\s\\S]*?)```/g, '<pre><code>$1</code></pre>').replace(/`([^`]+)`/g, '<code>$1</code>').replace(/\\n/g, '<br>');\n        };\n        let displayText = '';\n        for (let i = 0; i < answer.length; i++) {\n          displayText += answer[i];\n          const formattedText = formatResponse(displayText);\n          setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n            ...msg,\n            text: formattedText\n          } : msg));\n          await new Promise(resolve => setTimeout(resolve, 20));\n        }\n      } else {\n        var _response$body;\n        const reader = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.getReader();\n        if (!reader) throw new Error('No response body');\n        let accumulatedText = '';\n        while (true) {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) break;\n          const chunk = new TextDecoder().decode(value);\n          accumulatedText += chunk;\n          setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n            ...msg,\n            text: accumulatedText\n          } : msg));\n        }\n      }\n      setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n        ...msg,\n        isStreaming: false\n      } : msg));\n    } catch (error) {\n      console.error('Error:', error);\n      const errorMessage = error.name === 'AbortError' ? 'Generation stopped by user.' : error.message || 'Unknown error occurred';\n      setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n        ...msg,\n        text: `⚠️ ${errorMessage}`,\n        isStreaming: false\n      } : msg));\n    } finally {\n      controllerRef.current = null; // 🚨 Clear controller\n\n      setIsLoading(false);\n    }\n  };\n  const handleStopGenerating = () => {\n    var _controllerRef$curren;\n    (_controllerRef$curren = controllerRef.current) === null || _controllerRef$curren === void 0 ? void 0 : _controllerRef$curren.abort();\n    controllerRef.current = null;\n    setMessages(prev => prev.map(msg => msg.isStreaming ? {\n      ...msg,\n      isStreaming: false,\n      text: msg.text + ' ⛔ stopped.'\n    } : msg));\n    setIsLoading(false);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-widget ${isChatOpen ? 'open' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header-content\",\n          children: [/*#__PURE__*/_jsxDEV(Bot, {\n            className: \"chat-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"AI Tutor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 1\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status\",\n              children: \"Online\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 1\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setIsChatOpen(false),\n          children: /*#__PURE__*/_jsxDEV(X, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 1\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-avatar\",\n            children: message.sender === 'user' ? /*#__PURE__*/_jsxDEV(User, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 46\n            }, this) : /*#__PURE__*/_jsxDEV(Bot, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 67\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-text\",\n              dangerouslySetInnerHTML: {\n                __html: message.text\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 1\n            }, this), message.isStreaming && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"typing-indicator\",\n              children: \"\\u258B\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-time\",\n              children: message.timestamp.toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 1\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 1\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 1\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Type your question...\",\n          disabled: isLoading,\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 1\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStopGenerating,\n          className: \"send-button stop\",\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 1\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !inputText.trim(),\n          className: \"send-button\",\n          children: /*#__PURE__*/_jsxDEV(Send, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 1\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-toggle-button\",\n      onClick: () => setIsChatOpen(!isChatOpen),\n      children: isChatOpen ? /*#__PURE__*/_jsxDEV(X, {\n        size: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(MessageCircle, {\n        size: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 1\n  }, this);\n}\n_s(App, \"z4GVr2yietuNdgIoCfW1a6KcDaA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","MessageCircle","X","Send","Bot","User","getApiUrl","jsxDEV","_jsxDEV","App","_s","isChatOpen","setIsChatOpen","messages","setMessages","id","text","sender","timestamp","Date","inputText","setInputText","isLoading","setIsLoading","messagesEndRef","inputRef","controllerRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","focus","handleSendMessage","trim","userMessage","now","toString","prev","botMessageId","streamingMessage","isStreaming","apiUrl","requestBody","message","question","query","prompt","controller","AbortController","response","fetch","method","headers","body","JSON","stringify","signal","ok","errorText","Error","status","statusText","contentType","get","includes","jsonResponse","json","answer","content","formatResponse","replace","displayText","i","length","formattedText","map","msg","Promise","resolve","setTimeout","_response$body","reader","getReader","accumulatedText","done","value","read","chunk","TextDecoder","decode","error","console","errorMessage","name","handleStopGenerating","_controllerRef$curren","abort","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","dangerouslySetInnerHTML","__html","toLocaleTimeString","hour","minute","ref","type","onChange","target","onKeyPress","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/BhavyaPaliwal/ai-tutor-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nimport { MessageCircle, X, Send, Bot, User } from 'lucide-react';\r\n\r\nimport { getApiUrl } from './config';\r\n\r\nimport './App.css';\r\n \r\ninterface Message {\r\n\r\n  id: string;\r\n\r\n  text: string;\r\n\r\n  sender: 'user' | 'bot';\r\n\r\n  timestamp: Date;\r\n\r\n  isStreaming?: boolean;\r\n\r\n}\r\n \r\nfunction App() {\r\n\r\n  const [isChatOpen, setIsChatOpen] = useState(false);\r\n\r\n  const [messages, setMessages] = useState<Message[]>([\r\n\r\n    {\r\n\r\n      id: '1',\r\n\r\n      text: \"Hello! I'm your AI Tutor. I'm here to help you learn and answer any questions you might have. What would you like to learn today?\",\r\n\r\n      sender: 'bot',\r\n\r\n      timestamp: new Date()\r\n\r\n    }\r\n\r\n  ]);\r\n\r\n  const [inputText, setInputText] = useState('');\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n \r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const controllerRef = useRef<AbortController | null>(null); // 🚨 Added controller\r\n \r\n  const scrollToBottom = () => {\r\n\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n\r\n  };\r\n \r\n  useEffect(() => {\r\n\r\n    scrollToBottom();\r\n\r\n  }, [messages]);\r\n \r\n  useEffect(() => {\r\n\r\n    if (isChatOpen && inputRef.current) {\r\n\r\n      inputRef.current.focus();\r\n\r\n    }\r\n\r\n  }, [isChatOpen]);\r\n \r\n  const handleSendMessage = async () => {\r\n\r\n    if (!inputText.trim() || isLoading) return;\r\n \r\n    const userMessage: Message = {\r\n\r\n      id: Date.now().toString(),\r\n\r\n      text: inputText,\r\n\r\n      sender: 'user',\r\n\r\n      timestamp: new Date()\r\n\r\n    };\r\n \r\n    setMessages(prev => [...prev, userMessage]);\r\n\r\n    setInputText('');\r\n\r\n    setIsLoading(true);\r\n \r\n    const botMessageId = (Date.now() + 1).toString();\r\n\r\n    const streamingMessage: Message = {\r\n\r\n      id: botMessageId,\r\n\r\n      text: '',\r\n\r\n      sender: 'bot',\r\n\r\n      timestamp: new Date(),\r\n\r\n      isStreaming: true\r\n\r\n    };\r\n \r\n    setMessages(prev => [...prev, streamingMessage]);\r\n \r\n    try {\r\n\r\n      const apiUrl = getApiUrl('/api/Tutor/ask');\r\n\r\n      const requestBody = {\r\n\r\n        message: inputText,\r\n\r\n        question: inputText,\r\n\r\n        query: inputText,\r\n\r\n        prompt: inputText\r\n\r\n      };\r\n \r\n      const controller = new AbortController(); // 🚨 Create new controller\r\n\r\n      controllerRef.current = controller;\r\n \r\n      const response = await fetch(apiUrl, {\r\n\r\n        method: 'POST',\r\n\r\n        headers: {\r\n\r\n          'Content-Type': 'application/json',\r\n\r\n        },\r\n\r\n        body: JSON.stringify(requestBody),\r\n\r\n        signal: controller.signal // 🚨 Add signal to fetch\r\n\r\n      });\r\n \r\n      if (!response.ok) {\r\n\r\n        const errorText = await response.text();\r\n\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n\r\n      }\r\n \r\n      const contentType = response.headers.get('content-type');\r\n \r\n      if (contentType && contentType.includes('application/json')) {\r\n\r\n        const jsonResponse = await response.json();\r\n\r\n        let answer = jsonResponse.answer || jsonResponse.message || jsonResponse.response || jsonResponse.content || JSON.stringify(jsonResponse);\r\n \r\n        const formatResponse = (text: string) => {\r\n\r\n          return text\r\n\r\n            .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n\r\n            .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\r\n\r\n            .replace(/```([\\s\\S]*?)```/g, '<pre><code>$1</code></pre>')\r\n\r\n            .replace(/`([^`]+)`/g, '<code>$1</code>')\r\n\r\n            .replace(/\\n/g, '<br>');\r\n\r\n        };\r\n \r\n        let displayText = '';\r\n\r\n        for (let i = 0; i < answer.length; i++) {\r\n\r\n          displayText += answer[i];\r\n\r\n          const formattedText = formatResponse(displayText);\r\n\r\n          setMessages(prev => prev.map(msg =>\r\n\r\n            msg.id === botMessageId\r\n\r\n              ? { ...msg, text: formattedText }\r\n\r\n              : msg\r\n\r\n          ));\r\n\r\n          await new Promise(resolve => setTimeout(resolve, 20));\r\n\r\n        }\r\n\r\n      } else {\r\n\r\n        const reader = response.body?.getReader();\r\n\r\n        if (!reader) throw new Error('No response body');\r\n \r\n        let accumulatedText = '';\r\n \r\n        while (true) {\r\n\r\n          const { done, value } = await reader.read();\r\n\r\n          if (done) break;\r\n \r\n          const chunk = new TextDecoder().decode(value);\r\n\r\n          accumulatedText += chunk;\r\n \r\n          setMessages(prev => prev.map(msg =>\r\n\r\n            msg.id === botMessageId\r\n\r\n              ? { ...msg, text: accumulatedText }\r\n\r\n              : msg\r\n\r\n          ));\r\n\r\n        }\r\n\r\n      }\r\n \r\n      setMessages(prev => prev.map(msg =>\r\n\r\n        msg.id === botMessageId\r\n\r\n          ? { ...msg, isStreaming: false }\r\n\r\n          : msg\r\n\r\n      ));\r\n \r\n    } catch (error: any) {\r\n\r\n      console.error('Error:', error);\r\n\r\n      const errorMessage = error.name === 'AbortError'\r\n\r\n        ? 'Generation stopped by user.'\r\n\r\n        : error.message || 'Unknown error occurred';\r\n \r\n      setMessages(prev => prev.map(msg =>\r\n\r\n        msg.id === botMessageId\r\n\r\n          ? { ...msg, text: `⚠️ ${errorMessage}`, isStreaming: false }\r\n\r\n          : msg\r\n\r\n      ));\r\n\r\n    } finally {\r\n\r\n      controllerRef.current = null; // 🚨 Clear controller\r\n\r\n      setIsLoading(false);\r\n\r\n    }\r\n\r\n  };\r\n \r\n  const handleStopGenerating = () => {\r\n\r\n    controllerRef.current?.abort();\r\n\r\n    controllerRef.current = null;\r\n \r\n    setMessages(prev =>\r\n\r\n      prev.map(msg =>\r\n\r\n        msg.isStreaming\r\n\r\n          ? { ...msg, isStreaming: false, text: msg.text + ' ⛔ stopped.' }\r\n\r\n          : msg\r\n\r\n      )\r\n\r\n    );\r\n\r\n    setIsLoading(false);\r\n\r\n  };\r\n \r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n\r\n      e.preventDefault();\r\n\r\n      handleSendMessage();\r\n\r\n    }\r\n\r\n  };\r\n \r\n  return (\r\n<div className=\"App\">\r\n<div className={`chat-widget ${isChatOpen ? 'open' : ''}`}>\r\n<div className=\"chat-header\">\r\n<div className=\"chat-header-content\">\r\n<Bot className=\"chat-icon\" />\r\n<div>\r\n<h3>AI Tutor</h3>\r\n<span className=\"status\">Online</span>\r\n</div>\r\n</div>\r\n<button className=\"close-button\" onClick={() => setIsChatOpen(false)}>\r\n<X size={20} />\r\n</button>\r\n</div>\r\n \r\n        <div className=\"chat-messages\">\r\n\r\n          {messages.map((message) => (\r\n<div key={message.id} className={`message ${message.sender}`}>\r\n<div className=\"message-avatar\">\r\n\r\n                {message.sender === 'user' ? <User size={16} /> : <Bot size={16} />}\r\n</div>\r\n<div className=\"message-content\">\r\n<div\r\n\r\n                  className=\"message-text\"\r\n\r\n                  dangerouslySetInnerHTML={{ __html: message.text }}\r\n\r\n                />\r\n\r\n                {message.isStreaming && <span className=\"typing-indicator\">▋</span>}\r\n<div className=\"message-time\">\r\n\r\n                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n</div>\r\n</div>\r\n</div>\r\n\r\n          ))}\r\n<div ref={messagesEndRef} />\r\n</div>\r\n \r\n        <div className=\"chat-input-container\">\r\n<input\r\n\r\n            ref={inputRef}\r\n\r\n            type=\"text\"\r\n\r\n            value={inputText}\r\n\r\n            onChange={(e) => setInputText(e.target.value)}\r\n\r\n            onKeyPress={handleKeyPress}\r\n\r\n            placeholder=\"Type your question...\"\r\n\r\n            disabled={isLoading}\r\n\r\n            className=\"chat-input\"\r\n\r\n          />\r\n\r\n          {isLoading ? (\r\n<button onClick={handleStopGenerating} className=\"send-button stop\">\r\n\r\n              Stop\r\n</button>\r\n\r\n          ) : (\r\n<button\r\n\r\n              onClick={handleSendMessage}\r\n\r\n              disabled={!inputText.trim()}\r\n\r\n              className=\"send-button\"\r\n>\r\n<Send size={18} />\r\n</button>\r\n\r\n          )}\r\n</div>\r\n</div>\r\n \r\n      <button\r\n\r\n        className=\"chat-toggle-button\"\r\n\r\n        onClick={() => setIsChatOpen(!isChatOpen)}\r\n>\r\n\r\n        {isChatOpen ? <X size={24} /> : <MessageCircle size={24} />}\r\n</button>\r\n</div>\r\n\r\n  );\r\n\r\n}\r\n \r\nexport default App;\r\n\r\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}