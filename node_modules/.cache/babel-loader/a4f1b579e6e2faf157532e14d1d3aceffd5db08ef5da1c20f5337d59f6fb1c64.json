{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BhavyaPaliwal\\\\ai-tutor-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { MessageCircle, X, Send, Bot, User, Square } from 'lucide-react';\nimport { getApiUrl } from './config';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [messages, setMessages] = useState([{\n    id: '1',\n    text: \"Hello! I'm your AI Tutor. I'm here to help you learn and answer any questions you might have. What would you like to learn today?\",\n    sender: 'bot',\n    timestamp: new Date()\n  }]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const streamingControlRef = useRef({\n    shouldStop: false\n  });\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  useEffect(() => {\n    if (isChatOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isChatOpen]);\n  const stopStreaming = () => {\n    streamingControlRef.current.shouldStop = true;\n    setIsStreaming(false);\n    setIsLoading(false);\n\n    // Mark any streaming messages as complete\n    setMessages(prev => prev.map(msg => msg.isStreaming ? {\n      ...msg,\n      isStreaming: false\n    } : msg));\n  };\n  const handleSendMessage = async () => {\n    if (!inputText.trim() || isLoading) return;\n    const userMessage = {\n      id: Date.now().toString(),\n      text: inputText,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputText('');\n    setIsLoading(true);\n    setIsStreaming(false);\n    streamingControlRef.current.shouldStop = false;\n\n    // Add a streaming bot message\n    const botMessageId = (Date.now() + 1).toString();\n    const streamingMessage = {\n      id: botMessageId,\n      text: '',\n      sender: 'bot',\n      timestamp: new Date(),\n      isStreaming: true\n    };\n    setMessages(prev => [...prev, streamingMessage]);\n    try {\n      // Call your .NET Web API\n      const apiUrl = getApiUrl('/api/Tutor/ask');\n      const requestBody = {\n        message: inputText,\n        question: inputText,\n        query: inputText,\n        prompt: inputText\n      };\n      console.log('Calling API:', apiUrl);\n      console.log('Request body:', requestBody);\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error response body:', errorText);\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // Check if response is streaming or JSON\n      const contentType = response.headers.get('content-type');\n      console.log('Response content-type:', contentType);\n      if (contentType && contentType.includes('application/json')) {\n        // Handle JSON response\n        const jsonResponse = await response.json();\n        console.log('JSON Response:', jsonResponse);\n\n        // Check if user stopped before processing\n        if (streamingControlRef.current.shouldStop) {\n          return;\n        }\n\n        // Try different possible response formats\n        let answer = '';\n        if (jsonResponse.answer) {\n          answer = jsonResponse.answer;\n        } else if (jsonResponse.message) {\n          answer = jsonResponse.message;\n        } else if (jsonResponse.response) {\n          answer = jsonResponse.response;\n        } else if (jsonResponse.content) {\n          answer = jsonResponse.content;\n        } else if (typeof jsonResponse === 'string') {\n          answer = jsonResponse;\n        } else {\n          answer = JSON.stringify(jsonResponse);\n        }\n        console.log('Extracted answer:', answer);\n\n        // Format the response for better display\n        const formatResponse = text => {\n          return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>') // Bold text\n          .replace(/\\*(.*?)\\*/g, '<em>$1</em>') // Italic text\n          .replace(/```([\\s\\S]*?)```/g, '<pre><code>$1</code></pre>') // Code blocks\n          .replace(/`([^`]+)`/g, '<code>$1</code>') // Inline code\n          .replace(/\\n/g, '<br>'); // Line breaks\n        };\n        setIsStreaming(true);\n        setIsLoading(false);\n\n        // Simulate streaming by updating the message character by character\n        let displayText = '';\n        for (let i = 0; i < answer.length; i++) {\n          // Check if user clicked stop\n          if (streamingControlRef.current.shouldStop) {\n            break;\n          }\n          displayText += answer[i];\n          const formattedText = formatResponse(displayText);\n          setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n            ...msg,\n            text: formattedText\n          } : msg));\n          // Add a small delay to simulate streaming\n          await new Promise(resolve => setTimeout(resolve, 20));\n        }\n      } else {\n        var _response$body;\n        // Handle actual streaming response\n        setIsStreaming(true);\n        setIsLoading(false);\n        const reader = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.getReader();\n        if (!reader) {\n          throw new Error('No response body');\n        }\n        let accumulatedText = '';\n        while (true) {\n          // Check if user clicked stop\n          if (streamingControlRef.current.shouldStop) {\n            reader.cancel();\n            break;\n          }\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) break;\n          const chunk = new TextDecoder().decode(value);\n          accumulatedText += chunk;\n\n          // Update the streaming message\n          setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n            ...msg,\n            text: accumulatedText\n          } : msg));\n        }\n      }\n\n      // Mark streaming as complete (only if not stopped by user)\n      if (!streamingControlRef.current.shouldStop) {\n        setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n          ...msg,\n          isStreaming: false\n        } : msg));\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      setMessages(prev => prev.map(msg => msg.id === botMessageId ? {\n        ...msg,\n        text: `Error: ${errorMessage}. Please check your backend connection.`,\n        isStreaming: false\n      } : msg));\n    } finally {\n      setIsStreaming(false);\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-widget ${isChatOpen ? 'open' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header-content\",\n          children: [/*#__PURE__*/_jsxDEV(Bot, {\n            className: \"chat-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"AI Tutor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status\",\n              children: \"Online\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setIsChatOpen(false),\n          children: /*#__PURE__*/_jsxDEV(X, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender === 'user' ? 'user' : 'bot'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-avatar\",\n            children: message.sender === 'user' ? /*#__PURE__*/_jsxDEV(User, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 46\n            }, this) : /*#__PURE__*/_jsxDEV(Bot, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 67\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-text\",\n              dangerouslySetInnerHTML: {\n                __html: message.text\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this), message.isStreaming && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"typing-indicator\",\n              children: \"\\u258B\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-time\",\n              children: message.timestamp.toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Type your question...\",\n          disabled: isLoading || isStreaming,\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), isStreaming ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopStreaming,\n          className: \"stop-button\",\n          title: \"Stop generating\",\n          children: /*#__PURE__*/_jsxDEV(Square, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !inputText.trim() || isLoading,\n          className: \"send-button\",\n          children: /*#__PURE__*/_jsxDEV(Send, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-toggle-button\",\n      onClick: () => setIsChatOpen(!isChatOpen),\n      children: isChatOpen ? /*#__PURE__*/_jsxDEV(X, {\n        size: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(MessageCircle, {\n        size: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NYz725qEqTZHIqlwNZO0O/6elcU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","MessageCircle","X","Send","Bot","User","Square","getApiUrl","jsxDEV","_jsxDEV","App","_s","isChatOpen","setIsChatOpen","messages","setMessages","id","text","sender","timestamp","Date","inputText","setInputText","isLoading","setIsLoading","isStreaming","setIsStreaming","messagesEndRef","inputRef","streamingControlRef","shouldStop","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","focus","stopStreaming","prev","map","msg","handleSendMessage","trim","userMessage","now","toString","botMessageId","streamingMessage","apiUrl","requestBody","message","question","query","prompt","console","log","response","fetch","method","headers","body","JSON","stringify","status","Object","fromEntries","entries","ok","errorText","error","Error","statusText","contentType","get","includes","jsonResponse","json","answer","content","formatResponse","replace","displayText","i","length","formattedText","Promise","resolve","setTimeout","_response$body","reader","getReader","accumulatedText","cancel","done","value","read","chunk","TextDecoder","decode","errorMessage","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","dangerouslySetInnerHTML","__html","toLocaleTimeString","hour","minute","ref","type","onChange","target","onKeyPress","placeholder","disabled","title","_c","$RefreshReg$"],"sources":["C:/Users/BhavyaPaliwal/ai-tutor-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { MessageCircle, X, Send, Bot, User, Square } from 'lucide-react';\r\nimport { getApiUrl } from './config';\r\nimport './App.css';\r\n\r\ninterface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'bot';\r\n  timestamp: Date;\r\n  isStreaming?: boolean;\r\n}\r\n\r\nfunction App() {\r\n  const [isChatOpen, setIsChatOpen] = useState(false);\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: '1',\r\n      text: \"Hello! I'm your AI Tutor. I'm here to help you learn and answer any questions you might have. What would you like to learn today?\",\r\n      sender: 'bot',\r\n      timestamp: new Date()\r\n    }\r\n  ]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isStreaming, setIsStreaming] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const streamingControlRef = useRef<{ shouldStop: boolean }>({ shouldStop: false });\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    if (isChatOpen && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isChatOpen]);\r\n\r\n  const stopStreaming = () => {\r\n    streamingControlRef.current.shouldStop = true;\r\n    setIsStreaming(false);\r\n    setIsLoading(false);\r\n    \r\n    // Mark any streaming messages as complete\r\n    setMessages(prev => prev.map(msg => \r\n      msg.isStreaming ? { ...msg, isStreaming: false } : msg\r\n    ));\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputText.trim() || isLoading) return;\r\n\r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      text: inputText,\r\n      sender: 'user',\r\n      timestamp: new Date()\r\n    };\r\n\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInputText('');\r\n    setIsLoading(true);\r\n    setIsStreaming(false);\r\n    streamingControlRef.current.shouldStop = false;\r\n\r\n    // Add a streaming bot message\r\n    const botMessageId = (Date.now() + 1).toString();\r\n    const streamingMessage: Message = {\r\n      id: botMessageId,\r\n      text: '',\r\n      sender: 'bot',\r\n      timestamp: new Date(),\r\n      isStreaming: true\r\n    };\r\n\r\n    setMessages(prev => [...prev, streamingMessage]);\r\n\r\n    try {\r\n      // Call your .NET Web API\r\n      const apiUrl = getApiUrl('/api/Tutor/ask');\r\n      const requestBody = {\r\n        message: inputText,\r\n        question: inputText,\r\n        query: inputText,\r\n        prompt: inputText\r\n      };\r\n      \r\n      console.log('Calling API:', apiUrl);\r\n      console.log('Request body:', requestBody);\r\n      \r\n      const response = await fetch(apiUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n\r\n      console.log('Response status:', response.status);\r\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Error response body:', errorText);\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      // Check if response is streaming or JSON\r\n      const contentType = response.headers.get('content-type');\r\n      console.log('Response content-type:', contentType);\r\n      \r\n      if (contentType && contentType.includes('application/json')) {\r\n        // Handle JSON response\r\n        const jsonResponse = await response.json();\r\n        console.log('JSON Response:', jsonResponse);\r\n        \r\n        // Check if user stopped before processing\r\n        if (streamingControlRef.current.shouldStop) {\r\n          return;\r\n        }\r\n        \r\n        // Try different possible response formats\r\n        let answer = '';\r\n        if (jsonResponse.answer) {\r\n          answer = jsonResponse.answer;\r\n        } else if (jsonResponse.message) {\r\n          answer = jsonResponse.message;\r\n        } else if (jsonResponse.response) {\r\n          answer = jsonResponse.response;\r\n        } else if (jsonResponse.content) {\r\n          answer = jsonResponse.content;\r\n        } else if (typeof jsonResponse === 'string') {\r\n          answer = jsonResponse;\r\n        } else {\r\n          answer = JSON.stringify(jsonResponse);\r\n        }\r\n        \r\n        console.log('Extracted answer:', answer);\r\n        \r\n        // Format the response for better display\r\n        const formatResponse = (text: string) => {\r\n          return text\r\n            .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>') // Bold text\r\n            .replace(/\\*(.*?)\\*/g, '<em>$1</em>') // Italic text\r\n            .replace(/```([\\s\\S]*?)```/g, '<pre><code>$1</code></pre>') // Code blocks\r\n            .replace(/`([^`]+)`/g, '<code>$1</code>') // Inline code\r\n            .replace(/\\n/g, '<br>'); // Line breaks\r\n        };\r\n        \r\n        setIsStreaming(true);\r\n        setIsLoading(false);\r\n        \r\n        // Simulate streaming by updating the message character by character\r\n        let displayText = '';\r\n        for (let i = 0; i < answer.length; i++) {\r\n          // Check if user clicked stop\r\n          if (streamingControlRef.current.shouldStop) {\r\n            break;\r\n          }\r\n          \r\n          displayText += answer[i];\r\n          const formattedText = formatResponse(displayText);\r\n          setMessages(prev => prev.map(msg => \r\n            msg.id === botMessageId \r\n              ? { ...msg, text: formattedText }\r\n              : msg\r\n          ));\r\n          // Add a small delay to simulate streaming\r\n          await new Promise(resolve => setTimeout(resolve, 20));\r\n        }\r\n      } else {\r\n        // Handle actual streaming response\r\n        setIsStreaming(true);\r\n        setIsLoading(false);\r\n        \r\n        const reader = response.body?.getReader();\r\n        if (!reader) {\r\n          throw new Error('No response body');\r\n        }\r\n\r\n        let accumulatedText = '';\r\n        \r\n        while (true) {\r\n          // Check if user clicked stop\r\n          if (streamingControlRef.current.shouldStop) {\r\n            reader.cancel();\r\n            break;\r\n          }\r\n          \r\n          const { done, value } = await reader.read();\r\n          \r\n          if (done) break;\r\n          \r\n          const chunk = new TextDecoder().decode(value);\r\n          accumulatedText += chunk;\r\n          \r\n          // Update the streaming message\r\n          setMessages(prev => prev.map(msg => \r\n            msg.id === botMessageId \r\n              ? { ...msg, text: accumulatedText }\r\n              : msg\r\n          ));\r\n        }\r\n      }\r\n\r\n      // Mark streaming as complete (only if not stopped by user)\r\n      if (!streamingControlRef.current.shouldStop) {\r\n        setMessages(prev => prev.map(msg => \r\n          msg.id === botMessageId \r\n            ? { ...msg, isStreaming: false }\r\n            : msg\r\n        ));\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n      setMessages(prev => prev.map(msg => \r\n        msg.id === botMessageId \r\n          ? { ...msg, text: `Error: ${errorMessage}. Please check your backend connection.`, isStreaming: false }\r\n          : msg\r\n      ));\r\n    } finally {\r\n      setIsStreaming(false);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Chat Widget */}\r\n      <div className={`chat-widget ${isChatOpen ? 'open' : ''}`}>\r\n        {/* Chat Header */}\r\n        <div className=\"chat-header\">\r\n          <div className=\"chat-header-content\">\r\n            <Bot className=\"chat-icon\" />\r\n            <div>\r\n              <h3>AI Tutor</h3>\r\n              <span className=\"status\">Online</span>\r\n            </div>\r\n          </div>\r\n          <button \r\n            className=\"close-button\"\r\n            onClick={() => setIsChatOpen(false)}\r\n          >\r\n            <X size={20} />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Chat Messages */}\r\n        <div className=\"chat-messages\">\r\n          {messages.map((message) => (\r\n            <div \r\n              key={message.id} \r\n              className={`message ${message.sender === 'user' ? 'user' : 'bot'}`}\r\n            >\r\n              <div className=\"message-avatar\">\r\n                {message.sender === 'user' ? <User size={16} /> : <Bot size={16} />}\r\n              </div>\r\n              <div className=\"message-content\">\r\n                <div \r\n                  className=\"message-text\"\r\n                  dangerouslySetInnerHTML={{ __html: message.text }}\r\n                />\r\n                {message.isStreaming && <span className=\"typing-indicator\">▋</span>}\r\n                <div className=\"message-time\">\r\n                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n\r\n        {/* Chat Input */}\r\n        <div className=\"chat-input-container\">\r\n          <input\r\n            ref={inputRef}\r\n            type=\"text\"\r\n            value={inputText}\r\n            onChange={(e) => setInputText(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"Type your question...\"\r\n            disabled={isLoading || isStreaming}\r\n            className=\"chat-input\"\r\n          />\r\n          \r\n          {/* Conditional rendering: Show stop button when streaming, send button otherwise */}\r\n          {isStreaming ? (\r\n            <button \r\n              onClick={stopStreaming}\r\n              className=\"stop-button\"\r\n              title=\"Stop generating\"\r\n            >\r\n              <Square size={18} />\r\n            </button>\r\n          ) : (\r\n            <button \r\n              onClick={handleSendMessage}\r\n              disabled={!inputText.trim() || isLoading}\r\n              className=\"send-button\"\r\n            >\r\n              <Send size={18} />\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Floating Chat Button */}\r\n      <button \r\n        className=\"chat-toggle-button\"\r\n        onClick={() => setIsChatOpen(!isChatOpen)}\r\n      >\r\n        {isChatOpen ? <X size={24} /> : <MessageCircle size={24} />}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}